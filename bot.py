import telebot
import config
import random
import utils
import time
import COVID19Py
import pyowm
import requests
import datetime
import sys
import sqlite3

from pyowm.owm import OWM
from pyowm.utils.config import get_default_config
from requests import get
from telebot import TeleBot, types
from bs4 import BeautifulSoup as BS
from random import randint

# –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('db/database.db', check_same_thread=False)
cursor = conn.cursor()


# —Å–æ–∑–¥–∞–Ω–∏–µ –±–¥ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
def create_tables():
    users_query = '''CREATE TABLE IF NOT EXISTS USERS 
                        (user_id INTEGER PRIMARY KEY NOT NULL,
                        user_name TEXT,
                        user_surname TEXT,
                        username TEXT)'''
    cursor.execute(users_query)
    conn.commit()


create_tables()


# –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥
def db_table_val(user_id: int, user_name: str, user_surname: str, username: str):
    cursor.execute('INSERT INTO users (user_id, user_name, user_surname, username) VALUES (?, ?, ?, ?)',
                   (user_id, user_name, user_surname, username))
    conn.commit()


# —è–∑—ã–∫
config_dict = get_default_config()
config_dict['language'] = 'ru'
owm = OWM(config.WEATHER_API, config_dict)

# covid19 = COVID19Py.COVID19()
covid19 = COVID19Py.COVID19(url="https://cvtapi.nl")

bot = telebot.TeleBot(config.TOKEN)
api_weather = config.WEATHER_API
response = requests.get(config.URLPRIVAT).json()
apikey = config.APIKEYYANDEX


# start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    sticker = open('img/welcome.webp', 'rb')
    bot.send_sticker(message.chat.id, sticker)
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü–æ–º–æ—â—å")
    btn2 = types.KeyboardButton("–ò–≥—Ä—ã")
    btn3 = types.KeyboardButton("–†–∞–∑–Ω–æ–µ")
    btn4 = types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

    markup.add(btn1, btn2, btn3, btn4)
    # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ —Å—Ç–∞—Ä—Ç
    msg = bot.send_message(message.chat.id,
                           "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –±—ã—Ç—å "
                           "–ø–æ–¥–æ–ø—ã—Ç–Ω—ã–º –∫—Ä–æ–ª–∏–∫–æ–º.".format(
                               message.from_user, bot.get_me()),
                           parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(msg, process_select_step)


# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def menu(message):
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü–æ–º–æ—â—å")
    btn2 = types.KeyboardButton("–ò–≥—Ä—ã")
    btn3 = types.KeyboardButton("–†–∞–∑–Ω–æ–µ")
    btn4 = types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

    markup.add(btn1, btn2, btn3, btn4)
    msg = bot.send_message(message.chat.id, "–í—ã –≤ —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é".format(message.from_user, bot.get_me()),
                           parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(msg, process_select_step)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
def process_select_step(message):
    try:
        if message.text == '–ü–æ–º–æ—â—å':
            helps(message)
        elif message.text == '–†–∞–∑–Ω–æ–µ':
            other_command(message)
        elif message.text == '–ò–≥—Ä—ã':
            games(message)
        elif message.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
            register_user_confirm(message)
        else:
            send_welcome(message)

    except Exception as e:
        return menu(message)


# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–¥
def register_user_confirm(message):
    us_id = message.from_user.id
    us_name = message.from_user.first_name
    us_sname = message.from_user.last_name
    username = message.from_user.username

    db_table_val(user_id=us_id, user_name=us_name, user_surname=us_sname, username=username)
    bot.send_message(message.chat.id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# /help
@bot.message_handler(commands=['help'])
def helps(message):
    message_text = '‚ö°Ô∏è EliteBot by Vladimir v1.0.1\n\n' \
                   + '–°–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø–æ–ª—å–∑—É üëÄ\n' \
                   + '–¢—É—Ç –∂–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É, –Ω–æ–≤–æ—Å—Ç–∏, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π - ' \
                     '–æ—Ç –∏–≥—Ä –¥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç!\n\n' \
                   + 'üß© –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é.'
    bot.send_message(message.chat.id, message_text)
    menu(message)


def other_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞")
    btn2 = types.KeyboardButton("–ö—É—Ä—Å—ã –í–∞–ª—é—Ç")
    btn3 = types.KeyboardButton("–ü–æ—Å—Ç—ã Rss")
    btn4 = types.KeyboardButton("–ö–æ–≤–∏–¥")
    btn5 = types.KeyboardButton("–ì–æ—Ä–æ—Å–∫–æ–ø")
    btn6 = types.KeyboardButton("–ú–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è")
    btn7 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è")

    markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7)
    msg = bot.send_message(message.chat.id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:".format(message.from_user, bot.get_me()),
                           parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(msg, process_select_other_step)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
def process_select_other_step(message):
    try:
        if message.text == '–ü–æ–≥–æ–¥–∞' or message.text == '/weather' or message.text == '/weather@TheExcelentBot':
            weather(message)
        elif message.text == '–ö—É—Ä—Å—ã –í–∞–ª—é—Ç':
            coins(message)
        elif message.text == '–ü–æ—Å—Ç—ã Rss':
            read_rss(message)
        elif message.text == '–ö–æ–≤–∏–¥':
            covid_cmd(message)
        elif message.text == '–ì–æ—Ä–æ—Å–∫–æ–ø':
            Goroscop(message)
        elif message.text == '–ú–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è':
            locationSend(message)
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è' or message.text == '/back' or message.text == '/back@TheExcelentBot':
            menu(message)
        else:
            menu(message)

    except Exception as e:
        return menu(message)


# –î–†–£–ì–ò–ï –ö–û–ú–ê–ù–î–´

# rss
@bot.message_handler(commands=['read_rss'])
def read_rss(message):
    post = utils.feed_parser()
    bot.send_message(message.chat.id, '–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö:')
    for key in post.keys():
        bot.send_message(message.chat.id, key + '\n' + post[key])
    return menu(message)


# covid
@bot.message_handler(commands=['covid'])
def covid_cmd(message):
    # keyboard
    markupCovid = types.ReplyKeyboardMarkup(resize_keyboard=True)
    itemus = types.KeyboardButton("–°–®–ê")
    itemru = types.KeyboardButton("–†–æ—Å—Å–∏—è")
    itemua = types.KeyboardButton("–£–∫—Ä–∞–∏–Ω–∞")
    itemback = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è")

    markupCovid.add(itemus, itemru, itemua, itemback)

    bot.send_message(message.chat.id, "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω—É —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
                     parse_mode='html', reply_markup=markupCovid)


@bot.message_handler(content_types=['text'])
def covid(message):
    final_covid_message = ""
    get_message_bot = message.text.strip().lower()
    if get_message_bot == "—Å—à–∞":
        location = covid19.getLocationByCountryCode("US")
    elif get_message_bot == "—É–∫—Ä–∞–∏–Ω–∞":
        location = covid19.getLocationByCountryCode("UA")
    elif get_message_bot == "—Ä–æ—Å—Å–∏—è":
        location = covid19.getLocationByCountryCode("RU")
    elif get_message_bot == "–≤–µ—Ä–Ω—É—Ç—å—Å—è":
        menu(message)
    else:
        covid(message)

    if final_covid_message == "":
        date = location[0]['last_updated'].split("T")
        time = date[1].split(".")
        final_covid_message = f"<u>–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ:</u>\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {location[0]['country_population']:,}\n" \
                              f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {date[0]} {time[0]}\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:\n<b>" \
                              f"–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: </b>{location[0]['latest']['confirmed']:,}\n<b>–°–º–µ—Ç—Ä–µ–π: </b>" \
                              f"{location[0]['latest']['deaths']:,}"
    bot.send_message(message.chat.id, final_covid_message, parse_mode='html')


# –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
def coins(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    itembtn1 = types.KeyboardButton('USD')
    itembtn2 = types.KeyboardButton('EUR')
    itembtn3 = types.KeyboardButton('RUR')
    itembtn4 = types.KeyboardButton('BTC')
    markup.add(itembtn1, itembtn2, itembtn3, itembtn4)

    msg = bot.send_message(message.chat.id, "–£–∑–Ω–∞—Ç—å –Ω–∞–ª–∏—á–Ω—ã–π –∫—É—Ä—Å –°–±–µ—Ä–ë–∞–Ω–∫–∞ (–≤ –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö)", reply_markup=markup)
    bot.register_next_step_handler(msg, process_coin_step)


def process_coin_step(message):
    try:
        for coin in response:
            if message.text == coin['ccy']:
                bot.send_message(message.chat.id, printCoin(coin['buy'], coin['sale']), parse_mode="Markdown")
                coins(message)

    except Exception as e:
        bot.reply_to(message, '–æ—à–∏–±–∫–∞')


# –∫—É—Ä—Å –≤–∞–ª—é—Ç
def printCoin(buy, sale):
    return "üí∞ *–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏:* " + str(buy) + "\nüí∞ *–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏:* " + str(sale)


# –ø–æ–≥–æ–¥–∞
@bot.message_handler(commands=['weather'])
def weather(message):
    bot.send_message(message.chat.id, '–í –∫–∞–∫–æ–º –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ —Ö–æ—Ç–∏–º —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?')
    bot.register_next_step_handler(message, weatherSend)


def weatherSend(message):
    bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∂–∞–µ–º...')

    try:
        mgr = owm.weather_manager()
        observation = mgr.weather_at_place(message.text)
        w = observation.weather
        temp = w.temperature('celsius')['temp']
        today = datetime.datetime.today()
        # –æ—Ç–≤–µ—Ç –ø–æ–≥–æ–¥—ã
        answer = '–°–µ–≥–æ–¥–Ω—è, ' + (
            today.strftime("%d/%m/%Y")) + ' ' + '–≤ –≥–æ—Ä–æ–¥–µ ' + message.text + ' ' + w.detailed_status + '\n'
        answer += '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Ä–∞–π–æ–Ω–µ ' + str(temp) + ' –ø–æ –¶–µ–ª—å—Å–∏—é.' + '\n\n'
        if temp < 5:
            answer += '–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ —Ö–æ–ª–æ–¥–Ω–æ, –æ–¥–µ–≤–∞–π—Å—è —Ç–µ–ø–ª–æ!'
        elif temp < 17:
            answer += '–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ, –æ–¥–µ–≤–∞–π—Å—è –ø–æ—Ç–µ–ø–ª–µ–µ!'
        else:
            answer += '–ü–æ–≥–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ –∫–∞–µ—Ñ! –û–¥–µ–≤–∞–π—Å—è –∫–∞–∫ –¥—É—à–µ —É–≥–æ–¥–Ω–æ!'

        bot.send_message(message.chat.id, answer)
        return menu(message)

    except:
        bot.send_message(message.chat.id, '–Ø –µ—â—ë –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ :(\n–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º –ø–æ–≥–æ–¥—É –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ?')
        return other_command(message)


# –∏–≥—Ä—ã
@bot.message_handler(commands=['game'])
def games(message):
    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    itemrandom = types.KeyboardButton('–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ')
    itemrandomball = types.KeyboardButton('–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä')
    itemrandomOR = types.KeyboardButton('–û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞')
    itemkvest = types.KeyboardButton('–ö–≤–µ—Å—Ç')
    itemback = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è')
    markup.add(itemrandom, itemrandomball, itemrandomOR, itemkvest, itemback)

    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É", reply_markup=markup)
    bot.register_next_step_handler(msg, process_select_games_step)


def process_select_games_step(message):
    try:
        if message.text == '–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            bot.send_message(message.chat.id, str(random.randint(0, 100)))  # —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
            return menu(message)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é ‚Äì games (–º–µ–Ω—é)
        elif message.text == '–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä':
            Magic8Ball(message)
        elif message.text == '–û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞':
            Orel_Or_Reshka(message)
        elif message.text == '–ö–≤–µ—Å—Ç':
            games_kvest(message)
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
            menu(message)
        else:
            menu(message)

    except Exception as e:
        return menu(message)


# –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä
answers = [
    '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ',
    '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ö–æ—Ä–æ—à–∏–µ',
    '–û—Ç–≤–µ—Ç —Ç—É–º–∞–Ω–Ω—ã–π',
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
    '–ù–µ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å',
    '–°–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–∑–∂–µ',
    '–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ',
    '–õ—É—á—à–µ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å –≤–∞–º —Å–µ–π—á–∞—Å',
    '–ù–µ—Å–æ–º–Ω–µ–Ω–Ω–æ',
    '–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è',
    '–î–∞ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ',
    '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ',
    '–ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç',
    '–ù–∞—Å–∫–æ–ª—å–∫–æ —è –ø–æ–Ω–∏–º–∞—é, –¥–∞',
    '–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –µ—â–µ —Ä–∞–∑',
    '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ —Ç–∞–∫ —Ö–æ—Ä–æ—à',
    '–ù–µ –≤ —Å—á–µ—Ç –Ω–∞ –Ω–µ–º',
    '–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç,—á—Ç–æ –Ω–µ—Ç',
    '–û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ'
]


def Magic8Ball(message):
    bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å.")
    get_message_8ball_bot = message.text.strip().lower()
    bot.register_next_step_handler(message, Magic8BallSend)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì Magic8BallSend


def Magic8BallSend(message):
    bot.send_message(message.chat.id, answers[random.randint(0, len(answers) - 1)])  # —Ä–∞–Ω–¥–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
    games(message)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é ‚Äì games (–º–µ–Ω—é)


# –æ—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞
answers_orre = [
    '–û—Ä—ë–ª',
    '–†–µ—à–∫–∞'
]


def Orel_Or_Reshka(message):
    bot.send_message(message.chat.id,
                     answers_orre[random.randint(0, len(answers_orre) - 1)])
    games(message)


# –≥–æ—Ä–æ—Å–∫–æ–ø
first_gor = [
    "–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, —Å–µ–≥–æ–¥–Ω—è –∑–≤—ë–∑–¥—ã –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –≤–∞—à–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
    "–°–µ–≥–æ–¥–Ω—è ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.",
    "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å—Å—è –Ω–∞ —Å–º–µ–ª—ã–π –ø–æ—Å—Ç—É–ø–æ–∫!",
    "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å–æ —Å—Ç–∞—Ä—ã–º–∏.",
    "–ü–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –Ω–∞–∫–æ–ø–∏–≤—à–∏–º–∏—Å—è –¥–µ–ª–∞–º–∏."
]
second_gor = [
    "–ù–æ –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –¥–∞–∂–µ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –ø—Ä–æ",
    "–ï—Å–ª–∏ –ø–æ–µ–¥–µ—Ç–µ –∑–∞ –≥–æ—Ä–æ–¥, –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥—É–º–∞–π—Ç–µ –ø—Ä–æ",
    "–¢–µ, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–∞—Ü–µ–ª–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–µ–ª, –¥–æ–ª–∂–Ω—ã –ø–æ–º–Ω–∏—Ç—å –ø—Ä–æ",
    "–ï—Å–ª–∏ —É –≤–∞—Å —É–ø–∞–¥–æ–∫ —Å–∏–ª, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞",
    "–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –º—ã—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã, –∞ –∑–Ω–∞—á–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥—É–º–∞—Ç—å –ø—Ä–æ"
]
second_add_gor = [
    "–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –±–ª–∏–∑–∫–∏–º–∏.",
    "–±—ã—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–µ –¥–æ–¥–µ–ª–∞–ª–∏ –≤—á–µ—Ä–∞.",
    "—Å–µ–±—è –∏ —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ, –∏–Ω–∞—á–µ –∫ –≤–µ—á–µ—Ä—É –≤–æ–∑–º–æ–∂–µ–Ω –ø–æ–ª–Ω—ã–π —Ä–∞–∑–¥—Ä–∞–π.",
    "—Ä–∞–±–æ—Ç—É –∏ –¥–µ–ª–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–∞–∫ –Ω–µ–∫—Å—Ç–∞—Ç–∏ –ø–æ–º–µ—à–∞—Ç—å –ø–ª–∞–Ω–∞–º.",
    "–æ—Ç–¥—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å–µ–±—è –≤ –∑–∞–≥–Ω–∞–Ω–Ω—É—é –ª–æ—à–∞–¥—å –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞."
]
third_gor = [
    "–ó–Ω–∞–π—Ç–µ, —á—Ç–æ —É—Å–ø–µ—Ö –±–ª–∞–≥–æ–≤–æ–ª–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–º, –ø–æ—ç—Ç–æ–º—É –ø–æ—Å–≤—è—Ç–∏—Ç–µ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—é –¥—É—Ö–∞.",
    "–ù–µ –Ω—É–∂–Ω–æ –±–æ—è—Ç—å—Å—è –æ–¥–∏–Ω–æ–∫–∏—Ö –≤—Å—Ç—Ä–µ—á ‚Äî —Å–µ–≥–æ–¥–Ω—è —Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –æ–Ω–∏ –∑–Ω–∞—á–∞—Ç –º–Ω–æ–≥–æ–µ.",
    "–ó–ª—ã–µ —è–∑—ã–∫–∏ –º–æ–≥—É—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –≤–∞–º –æ–±—Ä–∞—Ç–Ω–æ–µ, –Ω–æ —Å–µ–≥–æ–¥–Ω—è –∏—Ö —Å–ª—É—à–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.",
    "–î–∞–∂–µ –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–≥–æ –ú–µ—Ä–∫—É—Ä–∏—è, —Ç–æ —Ö–æ—Ç—è –±—ã –¥–æ–≤–µ–¥–∏—Ç–µ –¥–µ–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞.",
    "–ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏—Ç–µ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞ –Ω–∞ –ø—É—Ç–∏ ‚Äî –ø—Ä–æ—è–≤–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ, –∏ —Ç–æ–≥–¥–∞ —ç—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞ –ø–æ—Å—É–ª–∏—Ç –≤–∞–º –ø—Ä–∏—è—Ç–Ω—ã–µ —Ö–ª–æ–ø–æ—Ç—ã."
]


@bot.message_handler(content_types=['text'])
def Goroscop(message):
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç–∏–∫, —Å–µ–π—á–∞—Å —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
    keyboard = types.InlineKeyboardMarkup()

    key_oven = types.InlineKeyboardButton(text='–û–≤–µ–Ω', callback_data='zodiac_gor')
    keyboard.add(key_oven)
    key_telec = types.InlineKeyboardButton(text='–¢–µ–ª–µ—Ü', callback_data='zodiac_gor')
    keyboard.add(key_telec)
    key_rak = types.InlineKeyboardButton(text='–†–∞–∫', callback_data='zodiac_gor')
    keyboard.add(key_rak)
    key_bliznecy = types.InlineKeyboardButton(text='–ë–ª–∏–∑–Ω–µ—Ü—ã', callback_data='zodiac_gor')
    keyboard.add(key_bliznecy)
    key_strelec = types.InlineKeyboardButton(text='–°—Ç—Ä–µ–ª–µ—Ü', callback_data='zodiac_gor')
    keyboard.add(key_strelec)
    key_lev = types.InlineKeyboardButton(text='–õ–µ–≤', callback_data='zodiac_gor')
    keyboard.add(key_lev)
    key_deva = types.InlineKeyboardButton(text='–î–µ–≤–∞', callback_data='zodiac_gor')
    keyboard.add(key_deva)
    key_vesy = types.InlineKeyboardButton(text='–í–µ—Å—ã', callback_data='zodiac_gor')
    keyboard.add(key_vesy)
    key_scorpion = types.InlineKeyboardButton(text='–°–∫–æ—Ä–ø–∏–æ–Ω', callback_data='zodiac_gor')
    keyboard.add(key_scorpion)
    key_ryby = types.InlineKeyboardButton(text='–†—ã–±—ã', callback_data='zodiac_gor')
    keyboard.add(key_ryby)
    key_kozerog = types.InlineKeyboardButton(text='–ö–æ–∑–µ—Ä–æ–≥', callback_data='zodiac_gor')
    keyboard.add(key_kozerog)
    key_vodoley = types.InlineKeyboardButton(text='–í–æ–¥–æ–ª–µ–π', callback_data='zodiac_gor')
    keyboard.add(key_vodoley)

    bot.send_message(message.from_user.id, text='–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞', reply_markup=keyboard)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.message:
        if call.data == 'zodiac_gor':
            message = random.choice(first_gor) + ' ' + random.choice(second_gor) + ' ' + random.choice(
                second_add_gor) + ' ' + random.choice(third_gor)

            bot.send_message(call.id, message)
            other_command(message)


# –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
@bot.message_handler(content_types=["location"])
def locationSend(message):
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–æ—á–∫—É –Ω–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–æ–ª–≥–æ—Ç–∞, —à–∏—Ä–æ—Ç–∞):')
    bot.register_next_step_handler(message, location)

@bot.message_handler(content_types=["location"])
def location(message):
    if message.location is not None:
        coord = str(message.location.longitude) + ',' + str(message.location.latitude)
        r = requests.get('https://geocode-maps.yandex.ru/1.x/?apikey=' + apikey + '&format=json&geocode=' + coord)
    if (message.text != message.location):
        line = message.text  # –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        longitude = line.split(' ')[0]  # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
        latitude = line.split(' ')[1]
        coord = str(longitude) + ',' + str(latitude)
        r = requests.get('https://geocode-maps.yandex.ru/1.x/?apikey=' + apikey + '&format=json&geocode=' + coord)

    if len(r.json()['response']['GeoObjectCollection']['featureMember']) > 0: 
        address = r.json()['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['metaDataProperty'][ 'GeocoderMetaData']['text']
        bot.send_message(message.chat.id, '–í–∞—à –∞–¥—Ä–µ—Å\n{}'.format(address))
        menu(message)
    else:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –í–∞—à –∞–¥—Ä–µ—Å')
        return locationSend(message)


pictures = {
    0: "https://storage.geekclass.ru/images/760e484b-a099-4a7a-a722-5aec9a933614.jpg",
    1: "https://storage.geekclass.ru/images/4637fc41-08df-466a-b112-aa577dba6c1d.jpg",
    2: "https://storage.geekclass.ru/images/c2a2a60c-9c7b-4c3a-b663-42d2559bf869.jpg"
}

states = {}
inventories = {}


@bot.message_handler(commands=["kvest"])
def games_kvest(message):
    user = message.chat.id

    states[user] = 0
    inventories[user] = []
    bot.send_message(user, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–µ—Å—Ç!")

    process_state(user, states[user], inventories[user])


@bot.callback_query_handler(func=lambda call: True)
def user_answer(call):
    user = call.id
    process_answer(user, call.data)


def process_state(user, state, inventory):
    kb = types.InlineKeyboardMarkup()

    bot.send_photo(user, pictures[state])

    if state == 0:
        kb.add(types.InlineKeyboardButton(text="–ø–æ–π—Ç–∏ –Ω–∞–ø—Ä–∞–≤–æ", callback_data="1"))
        kb.add(types.InlineKeyboardButton(text="–ø–æ–π—Ç–∏ –Ω–∞–ª–µ–≤–æ", callback_data="2"))

        bot.send_message(user, "–í—ã –≤ –æ–∫–∞–∑–∞–ª–∏—Å—å –≤ —Ç–µ–º–Ω–æ–º –ø–æ–¥–∑–µ–º–µ–ª—å–µ, –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –¥–≤–∞ –ø—Ä–æ—Ö–æ–¥–∞.", reply_markup=kb)

    if state == 1:
        kb.add(types.InlineKeyboardButton(text="–ø–µ—Ä–µ–ø–ª—ã—Ç—å", callback_data="1"))
        kb.add(types.InlineKeyboardButton(text="–≤–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="2"))

        bot.send_message(user, "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –±–æ–ª—å—à–æ–µ –ø–æ–¥–∑–µ–º–Ω–æ–µ –æ–∑–µ—Ä–æ, –∞ –≤–¥–∞–ª–∏ –≤–∏–¥–Ω–µ–µ—Ç—Å—è –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Å—Ç—Ä–æ–≤.",
                         reply_markup=kb)

    if state == 2:
        bot.send_message(user, "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏.")


@bot.callback_query_handler(func=lambda call: True)
def process_answer(call, user, answer):
    if states[user] == 0:
        if call.data == "1":
            states[user] = 1
        else:
            if "key" in inventories[user]:
                bot.send_message(user,
                                 "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –∑–∞–∫—Ä—ã—Ç–∞—è –¥–≤–µ—Ä—å. –í—ã –ø—Ä–æ–±—É–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –µ–µ –∫–ª—é—á–µ–º, –∏ –¥–≤–µ—Ä—å –ø–æ–¥–¥–∞–µ—Ç—Å—è. "
                                 "–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –≤—ã—Ö–æ–¥.")
                states[user] = 2
            else:
                bot.send_message(user,
                                 "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –∑–∞–∫—Ä—ã—Ç–∞—è –¥–≤–µ—Ä—å, –∏, –∫–∞–∂–µ—Ç—Å—è, –±–µ–∑ –∫–ª—é—á–∞ –µ–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç—å. –ü—Ä–∏–¥–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è "
                                 "–æ–±—Ä–∞—Ç–Ω–æ.")
                states[user] = 0

    elif states[user] == 1:
        if call.data == "2":
            bot.send_message(user,
                             "–ò –ø—Ä–∞–≤–¥–∞, –Ω–µ —Å—Ç–æ–∏—Ç —à—Ç—É—Ä–º–æ–≤–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–¥—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...")
            states[user] = 0
        else:
            bot.send_message(user,
                             "–í—ã –ø—Ä–æ–±—É–µ—Ç–µ –ø–µ—Ä–µ–ø–ª—ã—Ç—å –æ–∑–µ—Ä–æ...")

            chance = randint(0, 100)
            if chance > 30:
                bot.send_message(user,
                                 "–í–æ–¥–∞ –æ–∫–∞–∑–∞–ª–æ—Å—å —Ç–µ–ø–ª–æ–π, –∞ –≤ —Å—É–Ω–¥—É–∫–µ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –≤—ã –Ω–∞—à–ª–∏ —Å—Ç–∞—Ä—ã–π –∫–ª—é—á. –°—Ç–æ–∏—Ç –≤–µ—Ä–Ω—É—Ç—Å—è "
                                 "–æ–±—Ä–∞—Ç–Ω–æ.")
                inventories[user].append("key")
                states[user] = 0
            else:
                bot.send_message(user, "–ù–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ –æ–∑–µ—Ä–∞ –≤–∞—Å –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞—é—Ç –≤–æ–ª–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–±—Ä–∞—Ç–Ω–æ.")
                states[user] = 1

    process_state(user, states[user], inventories[user])


bot.enable_save_next_step_handlers(delay=2)
bot.load_next_step_handlers()

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception:
            time.sleep(15)
